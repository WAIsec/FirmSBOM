import os
import magic

WEB_EXTENSION = ['.html', '.htm', '.xhtml', '.xml', '.css', '.scss', '.sass', '.less', '.js', '.ts', '.jsx', 'tsx', 'php', '.asp', '.aspx', '.jsp']

def find_web_files(fs_path):
    """
    This function finds web source
    <param>
    [fs_path]: filesystem path extracted from firmware file
    <return>
    [websource_list]: the list of websource existed in firmware filesystem
    """
    web_files = []
    for dirpath, _, filenames in os.walk(fs_path):
        for filename in filenames:
            if any(filename.lower().endswith(ext) for ext in WEB_EXTENSION):
                web_files.append(os.path.join(dirpath, filename))
    return web_files

def find_os_binary(fs_path):
    """
    This function finds binary file generated by OS
    <param>
    [fs_path]: filesystem path extracted from firmware file
    <return>
    [os_bin_list]: the list of binaries generated by OS in firmware filesystem
    """
    os_bins = []
    path_list = ['/bin', '/sbin', '/usr/bin', '/usr/sbin']
    mime = magic.Magic(mime=True)

    for sub_path in path_list:
        full_path = fs_path + sub_path
        if os.path.isdir(full_path):
            for dirpath, _, filenames in os.walk(full_path):
                for filename in filenames:
                    file_path = os.path.join(dirpath, filename)
                    if os.path.isfile(file_path):
                        mime_type = mime.from_file(file_path)
                        if mime_type in ['application/x-executable', 'application/x-sharedlib']:
                            os_bins.append(file_path)

    return os_bins

def find_vendor_files(fs_path):
    """
    This function finds binary or normal file generated by Manufacturer
    <param>
    [fs_path]: filesystem path extracted from firmware file
    <return>
    [ven_bins]: the list of files generated by vendor
    """
    ven_bins = []
    path_list = ['/usr/local', '/opt']
    mime = magic.Magic(mime=True)

    for sub_path in path_list:
        full_path = fs_path + sub_path
        if os.path.isdir(full_path):
            for dirpath, _, filenames in os.walk(full_path):
                for filename in filenames:
                    file_path = os.path.join(dirpath, filename)
                    if os.path.isfile(file_path):
                        mime_type = mime.from_file(file_path)
                        if mime_type in ['application/x-executable', 'application/x-sharedlib']:
                            ven_bins.append(file_path)
        else:
            continue
    return ven_bins

def find_configuration_files(fs_path):
    """
    This function finds binary or normal file generated by Manufacturer
    <param>
    [fs_path]: filesystem path extracted from firmware file
    <return>
    [conf_files]: the list of configuration files generated by vendor
    """    
    conf_files = []
    if os.path.isdir(fs_path):
        for dirpath, _, filenames in os.walk(fs_path):
            for filename in filenames:
                file_path = os.path.join(dirpath, filename)
                if os.path.isfile(file_path):
                    if filename.endswith('.conf'):
                        conf_files.append(os.path.join(dirpath, filename))

    return conf_files