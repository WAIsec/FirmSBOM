import os
import magic
from FirmParser.utils import VENDOR_STR, find_libraries
WEB_EXTENSION = ['.html', '.htm', '.xhtml', '.xml', '.css', '.scss', '.sass', '.less', '.js', '.ts', '.jsx', 'tsx', 'php', '.asp', '.aspx', '.jsp']

class LevelOneAnalyzer:
    def __init__(self, fs_path):
        self.fs_path = fs_path
        self.web_files = []
        self.os_bins = []
        self.ven_bins = []
        self.conf_files = []
        self.libs = find_libraries(fs_path)
        # for debugging
        self.exceptional_bins = []

    def analyze(self):
        try:
            self.find_web_files()
            self.classfy_binary()
            self.find_configuration_files()
            return 0
        except Exception as e:
            print(f"[-] Error during analysis: {e}")
            return 1
        
    def get_lv1_results(self):
        lv1_results = dict()
        lv1_results['web'] = self.web_files
        lv1_results['public_bin'] = self.os_bins
        lv1_results['vendor_bin'] = self.ven_bins
        lv1_results['config_file'] = self.conf_files
        lv1_results['libraries'] = self.libs
        return lv1_results

    def find_web_files(self):
        """
        This function finds web source
        <param>
        [fs_path]: filesystem path extracted from firmware file
        <return>
        [websource_list]: the list of websource existed in firmware filesystem
        """
        for dirpath, _, filenames in os.walk(self.fs_path):
            for filename in filenames:
                if any(filename.lower().endswith(ext) for ext in WEB_EXTENSION):
                    self.web_files.append(filename)

    def classfy_binary(self):
        for dirpath, _, filenames in os.walk(self.fs_path):
            for filename in filenames:
                file_path = os.path.join(dirpath, filename)

                # Check if any manufacturer string is in the filename (case-insensitive)
                if any(vendor_str.lower() in filename.lower() for vendor_str in VENDOR_STR):
                    self.ven_bins.append(file_path)
                    continue

                # Check if any manufacturer string is in the file content (case-insensitive)
                try:
                    with open(file_path, 'rb') as file:
                        content = file.read().lower()  # Convert content to lower case
                        if any(vendor_str.lower().encode() in content for vendor_str in VENDOR_STR):
                            self.ven_bins.append(file_path)
                        else:
                            self.os_bins.append(file_path)
                except Exception as e:
                    print(f"[-] Could not read file {file_path}: {e}")
                    self.exceptional_bins.append(file_path)

    def find_configuration_files(self):
        """
        This function finds binary or normal file generated by Manufacturer
        <param>
        [fs_path]: filesystem path extracted from firmware file
        <return>
        [conf_files]: the list of configuration files generated by vendor
        """
        if os.path.isdir(self.fs_path):
            for dirpath, _, filenames in os.walk(self.fs_path):
                for filename in filenames:
                    file_path = os.path.join(dirpath, filename)
                    if os.path.isfile(file_path):
                        if filename.endswith('.conf'):
                            self.conf_files.append(filename)

    def get_web_files(self):
        return list(set(self.web_files))

    def get_os_bins(self):
        return list(set(self.os_bins))

    def get_vendor_bins(self):
        return list(set(self.ven_bins))
    
    def get_configuration_files(self):
        return list(set(self.conf_files))
